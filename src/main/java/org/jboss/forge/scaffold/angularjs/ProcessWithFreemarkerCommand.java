/**
 * Copyright 2013 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Eclipse Public License version 1.0, available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package org.jboss.forge.scaffold.angularjs;

import java.util.ArrayList;
import java.util.List;
import javax.enterprise.event.Observes;
import javax.inject.Inject;

import org.jboss.forge.project.facets.WebResourceFacet;
import org.jboss.forge.resources.Resource;
import org.jboss.forge.scaffoldx.freemarker.FreemarkerClient;
import org.jboss.forge.scaffoldx.util.ScaffoldUtil;
import org.jboss.forge.shell.ShellPrompt;

/**
 * An observer for the {@link ProcessWithFreemarkerEvent} CDI event. This observer generates dynamic content based on the
 * inspection results for a JPA entity. The content is generated by Freemarker with templates serving as the basis for the
 * structure of the content.
 */
public class ProcessWithFreemarkerCommand {

    @Inject
    private ShellPrompt prompt;

    @Inject
    private WebResourceFacet web;

    @Inject
    private FreemarkerClient freemarkerClient;

    @Inject
    private ResourceRegistry resourceRegistry;

    /**
     * Processes the Freemarker templates with a provided data model and writes the result to a pre-determined location.
     * 
     * The {@link ProcessWithFreemarkerEvent} contains all the {@link ScaffoldResource}s to be processed. The source of the
     * {@link ScaffoldResource} instance provides the location of the Freemarker template, while the destination provides the
     * location where the generated content should be written to. The event also contains a data model to be used by Freemarker
     * when processing the templates.
     * 
     * All generated resources are populated in the {@link ResourceRegistry}. The {@link ResourceRegistry} is cleared before
     * every invocation of this method.
     * 
     * @param event The event containing the {@link ScaffoldResource}s to be processed with Freemarker.
     */
    public void execute(@Observes ProcessWithFreemarkerEvent event) {
        resourceRegistry.clear();
        List<Resource<?>> resources = new ArrayList<Resource<?>>();
        for (ScaffoldResource projectGlobalTemplate : event.getResources()) {
            String output = freemarkerClient.processFTL(event.getRoot(), projectGlobalTemplate.getSource());
            resources.add(ScaffoldUtil.createOrOverwrite(prompt, web.getWebResource(projectGlobalTemplate.getDestination()),
                    output, event.isOverwrite()));
        }
        resourceRegistry.addAll(resources);
        return;
    }

}
